import { ChromaVectorStore } from "@llamaindex/chroma";
import { Document, VectorStoreIndex, Settings, storageContextFromDefaults } from "llamaindex";
import { Ollama } from "@llamaindex/ollama";
import { OllamaEmbedding } from "@llamaindex/ollama";
import { chromaConfig, ollamaConfig } from '../config/environment.js';

/**
 * Setup ChromaDB collection with laboratory services knowledge base
 * This script populates the vector database with service information
 */
export class ChromaSetup {
  private vectorStore: ChromaVectorStore;
  private ollama: Ollama;
  private embedding: OllamaEmbedding;

  constructor() {
    // Initialize Ollama services
    this.ollama = new Ollama({ 
      model: ollamaConfig.model
    });
    
    this.embedding = new OllamaEmbedding({ 
      model: ollamaConfig.embeddingModel
    });

    // Set global LlamaIndex settings
    Settings.llm = this.ollama;
    Settings.embedModel = this.embedding;

    // Initialize ChromaDB vector store
    this.vectorStore = new ChromaVectorStore({
      collectionName: "laboratorio_buga"
    });
  }

  /**
   * Create knowledge base documents from service information
   */
  private createKnowledgeDocuments(): Document[] {
    const documents: Document[] = [
      // Service Area and Coverage
      new Document({
        text: "El servicio de laboratorio domiciliario est√° disponible √∫nicamente en el per√≠metro urbano de Buga, Colombia. No se atienden direcciones fuera del per√≠metro urbano de la ciudad.",
        metadata: { 
          category: "cobertura", 
          topic: "area_servicio",
          keywords: "buga, perimetro urbano, cobertura, area"
        },
        id_: "coverage_area"
      }),

      // Service Hours and Availability
      new Document({
        text: "Los servicios de toma de muestras domiciliarias se realizan en horario matutino entre las 5:30 AM y las 6:30 AM. Este es el √∫nico horario disponible para el servicio a domicilio.",
        metadata: { 
          category: "horarios", 
          topic: "disponibilidad",
          keywords: "horario, 5:30am, 6:30am, ma√±ana, disponibilidad"
        },
        id_: "service_hours"
      }),

      // Pricing Information
      new Document({
        text: "El costo del servicio domiciliario es de $20,000 pesos colombianos. Este precio incluye todo: el desplazamiento, la toma de muestras y el procesamiento. No hay costos adicionales.",
        metadata: { 
          category: "precios", 
          topic: "costo_servicio",
          keywords: "precio, 20000, pesos, colombianos, costo, tarifa"
        },
        id_: "service_pricing"
      }),

      // Requirements and Preparations
      new Document({
        text: "Requisitos importantes: Si los ex√°menes requieren muestra de orina o material fecal, estas muestras deben estar tomadas antes de la cita. El paciente debe estar en condiciones adecuadas seg√∫n las indicaciones m√©dicas (ayuno, etc.). Es necesario confirmar la cita antes de las 5:30 AM.",
        metadata: { 
          category: "requisitos", 
          topic: "preparacion",
          keywords: "requisitos, muestra, orina, fecal, ayuno, confirmacion, preparacion"
        },
        id_: "service_requirements"
      }),

      // Medical Order Requirements
      new Document({
        text: "Para completar la cita es obligatorio presentar la orden m√©dica. La orden puede ser enviada por WhatsApp como fotograf√≠a. Sin orden m√©dica no se puede realizar el servicio.",
        metadata: { 
          category: "documentos", 
          topic: "orden_medica",
          keywords: "orden medica, fotografia, whatsapp, obligatorio, documentos"
        },
        id_: "medical_order"
      }),

      // Sample Types and Procedures
      new Document({
        text: "Se realizan diferentes tipos de muestras: sangre venosa, sangre capilar, orina, deposiciones, esputo y otros seg√∫n la orden m√©dica. Todas las muestras se toman siguiendo protocolos de bioseguridad.",
        metadata: { 
          category: "muestras", 
          topic: "tipos_muestras",
          keywords: "sangre, orina, deposiciones, esputo, muestras, bioseguridad"
        },
        id_: "sample_types"
      }),

      // Booking Process
      new Document({
        text: "Para agendar una cita: 1) Proporcionar nombre completo, 2) Indicar direcci√≥n exacta en Buga per√≠metro urbano, 3) Especificar tipo de ex√°menes, 4) Confirmar fecha disponible, 5) Enviar orden m√©dica por WhatsApp.",
        metadata: { 
          category: "proceso", 
          topic: "agendamiento",
          keywords: "agendar, cita, nombre, direccion, examenes, fecha, proceso"
        },
        id_: "booking_process"
      }),

      // Contact and Communication
      new Document({
        text: "Toda la comunicaci√≥n se realiza por WhatsApp. Las confirmaciones, cambios de cita y env√≠o de √≥rdenes m√©dicas se manejan a trav√©s de este bot. Mantenemos comunicaci√≥n directa con el paciente.",
        metadata: { 
          category: "comunicacion", 
          topic: "whatsapp",
          keywords: "whatsapp, comunicacion, confirmacion, cambios, bot"
        },
        id_: "communication"
      }),

      // Service Quality and Safety
      new Document({
        text: "Contamos con personal t√©cnico capacitado, equipos esterilizados y seguimos todos los protocolos de bioseguridad. La calidad y seguridad del paciente son nuestra prioridad.",
        metadata: { 
          category: "calidad", 
          topic: "seguridad",
          keywords: "personal, tecnico, bioseguridad, calidad, seguridad, protocolos"
        },
        id_: "quality_safety"
      })
    ];

    return documents;
  }

  /**
   * Initialize and populate ChromaDB collection
   */
  async setupCollection(): Promise<VectorStoreIndex> {
    try {
      console.log('üîß Iniciando configuraci√≥n de ChromaDB...');
      
      // Create knowledge base documents
      const documents = this.createKnowledgeDocuments();
      console.log(`üìö Creados ${documents.length} documentos de conocimiento`);

      // Create storage context with vector store
      const storageContext = await storageContextFromDefaults({ 
        vectorStore: this.vectorStore 
      });

      // Create and populate index
      console.log('üîç Creando √≠ndice vectorial...');
      const index = await VectorStoreIndex.fromDocuments(documents, storageContext);
      
      console.log('‚úÖ ChromaDB configurado correctamente');
      console.log(`üìä Colecci√≥n: laboratorio_buga`);
      console.log(`üåê URL: ${chromaConfig.url}`);
      
      return index;
    } catch (error) {
      console.error('‚ùå Error configurando ChromaDB:', error);
      throw error;
    }
  }

  /**
   * Test the setup with a sample query
   */
  async testSetup(index: VectorStoreIndex): Promise<void> {
    try {
      console.log('üß™ Probando configuraci√≥n con consulta de prueba...');
      
      const queryEngine = index.asQueryEngine();
      const response = await queryEngine.query({ 
        query: "¬øCu√°l es el precio del servicio y en qu√© horario atienden?" 
      });
      
      console.log('‚úÖ Consulta de prueba exitosa:');
      console.log(`üìù Respuesta: ${response.toString()}`);
    } catch (error) {
      console.error('‚ùå Error en consulta de prueba:', error);
      throw error;
    }
  }

  /**
   * Get vector store instance
   */
  getVectorStore(): ChromaVectorStore {
    return this.vectorStore;
  }
}

// Export singleton instance
export const chromaSetup = new ChromaSetup();
