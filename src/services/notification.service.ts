<<<<<<< HEAD
<file upload>
=======
import { availabilityService } from './availability.service.js';
import { customerService } from './customer.service.js';
import { appointmentRepository } from '../repositories/appointment.repository.js';
import { 
  Appointment, 
  Customer, 
  AppointmentStatus, 
  BUSINESS_RULES 
} from '../models/appointment.model.js';

/**
 * Notification service for appointment confirmations and reminders
 * Handles automated WhatsApp notifications and appointment confirmations
 */
export class NotificationService {
  
  /**
   * Send appointment confirmation message
   */
  async sendAppointmentConfirmation(appointment: Appointment, customer: Customer): Promise<boolean> {
    try {
      console.log(`üì§ Enviando confirmaci√≥n de cita: ${appointment.id}`);
      
      const confirmationMessage = await this.generateConfirmationMessage(appointment, customer);
      
      // In a real implementation, this would integrate with WhatsApp API
      // For now, we'll log the message and return success
      console.log(`WhatsApp Message to ${customer.phoneNumber}:`);
      console.log(confirmationMessage);
      
      // TODO: Integrate with WhatsApp Business API or BuilderBot
      // await this.sendWhatsAppMessage(customer.phoneNumber, confirmationMessage);
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Error enviando confirmaci√≥n de cita:', error);
      return false;
    }
  }

  /**
   * Send appointment reminder message
   */
  async sendAppointmentReminder(appointment: Appointment, customer: Customer): Promise<boolean> {
    try {
      console.log(`‚è∞ Enviando recordatorio de cita: ${appointment.id}`);
      
      const reminderMessage = await this.generateReminderMessage(appointment, customer);
      
      console.log(`WhatsApp Reminder to ${customer.phoneNumber}:`);
      console.log(reminderMessage);
      
      // TODO: Integrate with WhatsApp API
      // await this.sendWhatsAppMessage(customer.phoneNumber, reminderMessage);
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Error enviando recordatorio de cita:', error);
      return false;
    }
  }

  /**
   * Send appointment cancellation message
   */
  async sendAppointmentCancellation(appointment: Appointment, customer: Customer, reason?: string): Promise<boolean> {
    try {
      console.log(`‚ùå Enviando notificaci√≥n de cancelaci√≥n: ${appointment.id}`);
      
      const cancellationMessage = await this.generateCancellationMessage(appointment, customer, reason);
      
      console.log(`WhatsApp Cancellation to ${customer.phoneNumber}:`);
      console.log(cancellationMessage);
      
      // TODO: Integrate with WhatsApp API
      // await this.sendWhatsAppMessage(customer.phoneNumber, cancellationMessage);
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Error enviando notificaci√≥n de cancelaci√≥n:', error);
      return false;
    }
  }

  /**
   * Send appointment rescheduling message
   */
  async sendAppointmentReschedule(
    oldAppointment: Appointment, 
    newAppointment: Appointment, 
    customer: Customer
  ): Promise<boolean> {
    try {
      console.log(`üîÑ Enviando notificaci√≥n de reagendamiento: ${oldAppointment.id} -> ${newAppointment.id}`);
      
      const rescheduleMessage = await this.generateRescheduleMessage(oldAppointment, newAppointment, customer);
      
      console.log(`WhatsApp Reschedule to ${customer.phoneNumber}:`);
      console.log(rescheduleMessage);
      
      // TODO: Integrate with WhatsApp API
      // await this.sendWhatsAppMessage(customer.phoneNumber, rescheduleMessage);
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Error enviando notificaci√≥n de reagendamiento:', error);
      return false;
    }
  }

  /**
   * Send daily reminders for tomorrow's appointments
   */
  async sendDailyReminders(): Promise<void> {
    try {
      console.log('üìÖ Enviando recordatorios diarios...');
      
      // Get tomorrow's appointments
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      const appointments = await appointmentRepository.findAppointments({
        status: AppointmentStatus.CONFIRMED,
        dateFrom: tomorrow,
        dateTo: tomorrow
      });
      
      console.log(`Encontradas ${appointments.length} citas para ma√±ana`);
      
      for (const appointment of appointments) {
        const customer = await customerService.findById(appointment.customerId);
        
        if (customer) {
          await this.sendAppointmentReminder(appointment, customer);
          
          // Small delay between messages to avoid spam detection
          await this.delay(1000);
        }
      }
      
      console.log('‚úÖ Recordatorios diarios enviados');
      
    } catch (error) {
      console.error('‚ùå Error enviando recordatorios diarios:', error);
    }
  }

  /**
   * Send preparation instructions for tomorrow's appointments
   */
  async sendPreparationInstructions(): Promise<void> {
    try {
      console.log('üìã Enviando instrucciones de preparaci√≥n...');
      
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      const appointments = await appointmentRepository.findAppointments({
        status: AppointmentStatus.CONFIRMED,
        dateFrom: tomorrow,
        dateTo: tomorrow
      });
      
      for (const appointment of appointments) {
        const customer = await customerService.findById(appointment.customerId);
        
        if (customer) {
          const instructionMessage = this.generatePreparationInstructions(appointment, customer);
          
          console.log(`WhatsApp Instructions to ${customer.phoneNumber}:`);
          console.log(instructionMessage);
          
          // TODO: Integrate with WhatsApp API
          // await this.sendWhatsAppMessage(customer.phoneNumber, instructionMessage);
          
          await this.delay(1000);
        }
      }
      
      console.log('‚úÖ Instrucciones de preparaci√≥n enviadas');
      
    } catch (error) {
      console.error('‚ùå Error enviando instrucciones de preparaci√≥n:', error);
    }
  }

  /**
   * Generate appointment confirmation message
   */
  private async generateConfirmationMessage(appointment: Appointment, customer: Customer): Promise<string> {
    const timeSlot = await appointmentRepository.findTimeSlotById(appointment.timeSlotId);
    const appointmentDate = appointment.appointmentDate.toLocaleDateString('es-CO', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
  let message = `üß™ **CITA CONFIRMADA - Marcela Salazar**\n\n`;
    message += `Hola ${customer.name},\n\n`;
    message += `‚úÖ Tu cita ha sido confirmada exitosamente:\n\n`;
    message += `üìÖ **Fecha:** ${appointmentDate}\n`;
    message += `üïê **Hora:** ${timeSlot?.startTime} - ${timeSlot?.endTime}\n`;
    message += `üìç **Direcci√≥n:** ${customer.address}\n`;
    message += `üî¨ **Tipo de muestra:** ${appointment.sampleType}\n`;
    message += `üí∞ **Valor:** $${appointment.totalAmount.toLocaleString('es-CO')} COP\n\n`;
    
    if (appointment.specialInstructions) {
      message += `üìã **Instrucciones especiales:**\n${appointment.specialInstructions}\n\n`;
    }
    
    message += `‚è∞ **Recuerda:**\n`;
    message += `‚Ä¢ Nuestro t√©cnico llegar√° puntualmente a tu domicilio\n`;
    message += `‚Ä¢ Ten lista tu orden m√©dica\n`;
    message += `‚Ä¢ Aseg√∫rate de estar en casa en el horario acordado\n\n`;
    
    message += `üìû Si necesitas cancelar o reprogramar, hazlo con m√≠nimo 2 horas de anticipaci√≥n.\n\n`;
    message += `¬°Gracias por confiar en nosotros! üôè`;
    
    return message;
  }

  /**
   * Generate appointment reminder message
   */
  private async generateReminderMessage(appointment: Appointment, customer: Customer): Promise<string> {
    const timeSlot = await appointmentRepository.findTimeSlotById(appointment.timeSlotId);
    const appointmentDate = appointment.appointmentDate;
    const isToday = appointmentDate.toDateString() === new Date().toDateString();
    const timeText = isToday ? 'hoy' : 'ma√±ana';
    
  let message = `‚è∞ **RECORDATORIO DE CITA - Marcela Salazar**\n\n`;
    message += `Hola ${customer.name},\n\n`;
    message += `Te recordamos que tienes una cita programada para ${timeText}:\n\n`;
    message += `üïê **Hora:** ${timeSlot?.startTime} - ${timeSlot?.endTime}\n`;
    message += `üìç **Direcci√≥n:** ${customer.address}\n`;
    message += `üî¨ **Tipo de muestra:** ${appointment.sampleType}\n\n`;
    
    if (isToday) {
      message += `üö® **¬°Tu cita es HOY!**\n`;
      message += `Por favor aseg√∫rate de:\n`;
      message += `‚Ä¢ Estar en casa en el horario acordado\n`;
      message += `‚Ä¢ Tener lista tu orden m√©dica\n`;
      message += `‚Ä¢ Cumplir con las instrucciones de preparaci√≥n\n\n`;
    } else {
      message += `üìã **Preparaci√≥n para ma√±ana:**\n`;
      message += `‚Ä¢ Ten lista tu orden m√©dica\n`;
      message += `‚Ä¢ Aseg√∫rate de seguir las instrucciones de tu doctor\n`;
      message += `‚Ä¢ Confirma que estar√°s en casa en el horario acordado\n\n`;
    }
    
    message += `üìû Para cancelaciones o reprogramaciones, cont√°ctanos con m√≠nimo 2 horas de anticipaci√≥n.\n\n`;
    message += `¬°Nos vemos ${timeText}! üë©‚Äç‚öïÔ∏èüë®‚Äç‚öïÔ∏è`;
    
    return message;
  }

  /**
   * Generate appointment cancellation message
   */
  private async generateCancellationMessage(
    appointment: Appointment, 
    customer: Customer, 
    reason?: string
  ): Promise<string> {
    const timeSlot = await appointmentRepository.findTimeSlotById(appointment.timeSlotId);
    const appointmentDate = appointment.appointmentDate.toLocaleDateString('es-CO', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
  let message = `‚ùå **CITA CANCELADA - Marcela Salazar**\n\n`;
    message += `Hola ${customer.name},\n\n`;
    message += `Tu cita ha sido cancelada:\n\n`;
    message += `üìÖ **Fecha:** ${appointmentDate}\n`;
    message += `üïê **Hora:** ${timeSlot?.startTime} - ${timeSlot?.endTime}\n`;
    message += `üìç **Direcci√≥n:** ${customer.address}\n\n`;
    
    if (reason) {
      message += `**Motivo:** ${reason}\n\n`;
    }
    
    message += `¬øDeseas reprogramar tu cita? Simplemente responde a este mensaje y te ayudaremos a encontrar una nueva fecha disponible.\n\n`;
    message += `üìû Tambi√©n puedes contactarnos directamente.\n\n`;
    message += `¬°Esperamos poder atenderte pronto! üôè`;
    
    return message;
  }

  /**
   * Generate appointment rescheduling message
   */
  private async generateRescheduleMessage(
    oldAppointment: Appointment, 
    newAppointment: Appointment, 
    customer: Customer
  ): Promise<string> {
    const oldTimeSlot = await appointmentRepository.findTimeSlotById(oldAppointment.timeSlotId);
    const newTimeSlot = await appointmentRepository.findTimeSlotById(newAppointment.timeSlotId);
    
    const oldDate = oldAppointment.appointmentDate.toLocaleDateString('es-CO', {
      weekday: 'long',
      month: 'long',
      day: 'numeric'
    });
    
    const newDate = newAppointment.appointmentDate.toLocaleDateString('es-CO', {
      weekday: 'long',
      month: 'long',
      day: 'numeric'
    });
    
  let message = `üîÑ **CITA REAGENDADA - Marcela Salazar**\n\n`;
    message += `Hola ${customer.name},\n\n`;
    message += `Tu cita ha sido reagendada exitosamente:\n\n`;
    message += `‚ùå **Fecha anterior:** ${oldDate} a las ${oldTimeSlot?.startTime}\n`;
    message += `‚úÖ **Nueva fecha:** ${newDate} a las ${newTimeSlot?.startTime}\n\n`;
    message += `üìç **Direcci√≥n:** ${customer.address}\n`;
    message += `üî¨ **Tipo de muestra:** ${newAppointment.sampleType}\n`;
    message += `üí∞ **Valor:** $${newAppointment.totalAmount.toLocaleString('es-CO')} COP\n\n`;
    
    message += `‚è∞ **Recuerda:**\n`;
    message += `‚Ä¢ Estar en casa en el nuevo horario acordado\n`;
    message += `‚Ä¢ Tener lista tu orden m√©dica\n`;
    message += `‚Ä¢ Seguir las instrucciones de preparaci√≥n\n\n`;
    
    message += `¬°Gracias por tu comprensi√≥n! üôè`;
    
    return message;
  }

  /**
   * Generate preparation instructions message
   */
  private generatePreparationInstructions(appointment: Appointment, customer: Customer): string {
  let message = `üìã **INSTRUCCIONES DE PREPARACI√ìN - Marcela Salazar**\n\n`;
    message += `Hola ${customer.name},\n\n`;
    message += `Para tu cita de ma√±ana, recuerda seguir estas instrucciones:\n\n`;
    
    // General instructions
    message += `üî¨ **Instrucciones generales:**\n`;
    message += `‚Ä¢ Ten lista tu orden m√©dica original\n`;
    message += `‚Ä¢ Mant√©n un documento de identidad a mano\n`;
    message += `‚Ä¢ Aseg√∫rate de estar en casa en el horario acordado\n`;
    message += `‚Ä¢ Prepara un espacio c√≥modo y bien iluminado\n\n`;
    
    // Specific instructions based on sample type
    message += `üíâ **Para tu tipo de muestra (${appointment.sampleType}):**\n`;
    
    switch (appointment.sampleType.toLowerCase()) {
      case 'sangre venosa':
        message += `‚Ä¢ Ayuno de 8-12 horas si es requerido por tu m√©dico\n`;
        message += `‚Ä¢ Solo puedes beber agua\n`;
        message += `‚Ä¢ Usa ropa c√≥moda con mangas f√°ciles de subir\n`;
        message += `‚Ä¢ Mantente hidratado bebiendo agua\n`;
        break;
        
      case 'sangre capilar':
        message += `‚Ä¢ Lava bien tus manos antes del procedimiento\n`;
        message += `‚Ä¢ Mant√©n las manos calientes para mejor circulaci√≥n\n`;
        message += `‚Ä¢ Ayuno solo si es requerido por tu m√©dico\n`;
        break;
        
      case 'orina':
        message += `‚Ä¢ Recolecta la primera orina de la ma√±ana si es posible\n`;
        message += `‚Ä¢ Usa el recipiente est√©ril que te proporcionaremos\n`;
        message += `‚Ä¢ Lava bien tus genitales antes de la recolecci√≥n\n`;
        message += `‚Ä¢ Recolecta la muestra del chorro medio\n`;
        break;
        
      case 'deposiciones':
        message += `‚Ä¢ No uses laxantes 3 d√≠as antes del examen\n`;
        message += `‚Ä¢ Recolecta la muestra en el recipiente est√©ril\n`;
        message += `‚Ä¢ Evita contaminar la muestra con orina\n`;
        message += `‚Ä¢ Refrigera la muestra si no puedes entregarla inmediatamente\n`;
        break;
        
      default:
        message += `‚Ä¢ Sigue las instrucciones espec√≠ficas de tu m√©dico\n`;
        message += `‚Ä¢ Pregunta a nuestro t√©cnico si tienes dudas\n`;
    }
    
    message += `\nüìû Si tienes preguntas o necesitas aclarar algo, no dudes en contactarnos.\n\n`;
    message += `¬°Nos vemos ma√±ana! üë©‚Äç‚öïÔ∏èüë®‚Äç‚öïÔ∏è`;
    
    return message;
  }

  /**
   * Get notification templates for different scenarios
   */
  getNotificationTemplates(): NotificationTemplates {
    return {
  welcome: `¬°Hola! üëã Bienvenido a Marcela Salazar. Estamos aqu√≠ para ayudarte con tus an√°lisis cl√≠nicos a domicilio. ¬øEn qu√© podemos asistirte hoy?`,
      
  serviceInfo: `üß™ **Marcela Salazar - Servicio a Domicilio**\n\nOfrecemos toma de muestras en tu hogar:\n‚Ä¢ An√°lisis de sangre\n‚Ä¢ Ex√°menes de orina\n‚Ä¢ An√°lisis de deposiciones\n‚Ä¢ Y mucho m√°s\n\nüí∞ Precio: $20,000 COP\nüïê Horario: 5:30 AM - 6:30 AM\nüìç √Årea: Per√≠metro urbano de Buga\n\n¬øTe gustar√≠a agendar una cita?`,
      
      scheduleOptions: `üìÖ Para agendar tu cita, puedo ayudarte con:\n\n1Ô∏è‚É£ Ver disponibilidad\n2Ô∏è‚É£ Agendar nueva cita\n3Ô∏è‚É£ Consultar cita existente\n4Ô∏è‚É£ Cancelar o reprogramar\n\n¬øQu√© opci√≥n prefieres?`,
      
      noAvailability: `üòî No hay disponibilidad para la fecha solicitada. Te sugiero revisar estas alternativas:\n\n{alternatives}\n\n¬øAlguna de estas opciones te conviene?`,
      
      confirmBooking: `‚úÖ ¬°Perfecto! Estoy a punto de confirmar tu cita:\n\nüìÖ {date}\nüïê {time}\nüìç {address}\nüî¨ {sampleType}\nüí∞ $20,000 COP\n\n¬øConfirmas estos datos?`,
      
      addressValidation: `üìç Para brindarte el mejor servicio, necesito confirmar tu direcci√≥n dentro del per√≠metro urbano de Buga.\n\nPor favor proporciona:\n‚Ä¢ Barrio\n‚Ä¢ Carrera/Calle y n√∫mero\n‚Ä¢ Punto de referencia (opcional)`,
      
      orderReminder: `üìÑ **Importante:** No olvides tener lista tu orden m√©dica para el d√≠a de la cita. Es indispensable para realizar los an√°lisis correctos.`,
      
  thankYou: `üôè ¬°Gracias por confiar en Marcela Salazar! Esperamos verte pronto.\n\n¬øHay algo m√°s en lo que pueda ayudarte?`
    };
  }

  /**
   * Delay function for rate limiting
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * TODO: Implement WhatsApp message sending
   * This would integrate with WhatsApp Business API or BuilderBot
   */
  private async sendWhatsAppMessage(phoneNumber: string, message: string): Promise<boolean> {
    // Implementation would depend on the WhatsApp integration method
    // Could be BuilderBot, WhatsApp Business API, or Twilio
    console.log(`[WhatsApp API] Sending to ${phoneNumber}: ${message}`);
    return true;
  }
}

// Interface for notification templates
export interface NotificationTemplates {
  welcome: string;
  serviceInfo: string;
  scheduleOptions: string;
  noAvailability: string;
  confirmBooking: string;
  addressValidation: string;
  orderReminder: string;
  thankYou: string;
}

// Export singleton instance
export const notificationService = new NotificationService();
>>>>>>> 25a86dc (feat: Implement Ollama service for local LLM processing)
