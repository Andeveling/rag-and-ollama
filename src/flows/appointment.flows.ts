import { addKeyword, EVENTS, utils } from '@builderbot/bot';
import { BaileysProvider } from '@builderbot/provider-baileys';
import { PostgreSQLAdapter } from '@builderbot/database-postgres';
import { customerService } from '../services/customer.service.js';
import { appointmentRepository } from '../repositories/appointment.repository.js';
import { notificationService } from '../services/notification.service.js';
import { availabilityService } from '../services/availability.service.js';
import { AppointmentStatus, BUSINESS_RULES } from '../models/appointment.model.js';

/**
 * View appointments flow - Shows customer's current and past appointments
 */
export const viewAppointmentFlow = addKeyword<BaileysProvider, PostgreSQLAdapter>([
    'ver citas',
    'mis citas',
    'consultar cita',
    'cita actual',
    'estado cita'
])
.addAction(async (ctx, { flowDynamic, state, gotoFlow }) => {
    try {
        console.log(`üëÄ Consultando citas: ${ctx.from}`);
        
        // Get customer
        let customerId = state.get('customerId');
        if (!customerId) {
            const customer = await customerService.findOrCreateFromWhatsApp(ctx.from, ctx.pushName);
            customerId = customer.id;
            await state.update({ customerId, customerName: customer.name });
        }
        
        const customer = await customerService.findById(customerId);
        if (!customer) {
            await flowDynamic('‚ùå No pude encontrar tu informaci√≥n. Por favor intenta de nuevo.');
            return;
        }
        
        await flowDynamic('üîç Consultando tus citas...');
        await utils.delay(1000);
        
        // Get customer appointments
        const appointments = await appointmentRepository.getCustomerAppointments(customerId, { limit: 10 });
        
        if (appointments.length === 0) {
            await flowDynamic([
                'üìÖ **No tienes citas registradas**',
                '',
                '¬øTe gustar√≠a agendar tu primera cita?',
                '',
                'üìù Responde "s√≠" para agendar o "no" si necesitas algo m√°s.'
            ].join('\n'));
            
            await state.update({ step: 'schedule_suggestion' });
            return;
        }
        
        // Separate appointments by status
        const pendingAppointments = appointments.filter(apt => 
            ['scheduled', 'confirmed'].includes(apt.status)
        );
        const completedAppointments = appointments.filter(apt => 
            apt.status === 'completed'
        );
        const cancelledAppointments = appointments.filter(apt => 
            apt.status === 'cancelled'
        );
        
        let message = `üìã **TUS CITAS - ${customer.name}**\n\n`;
        
        // Show pending appointments first
        if (pendingAppointments.length > 0) {
            message += 'üü¢ **CITAS ACTIVAS:**\n\n';
            
            for (const apt of pendingAppointments) {
                const timeSlot = await appointmentRepository.findTimeSlotById(apt.timeSlotId);
                const appointmentDate = apt.appointmentDate.toLocaleDateString('es-CO', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                
                const statusIcon = apt.status === 'confirmed' ? '‚úÖ' : '‚è≥';
                const statusText = apt.status === 'confirmed' ? 'Confirmada' : 'Programada';
                
                message += `${statusIcon} **${appointmentDate}**\n`;
                message += `üïê ${timeSlot?.startTime} - ${timeSlot?.endTime}\n`;
                message += `üî¨ ${apt.sampleType}\n`;
                message += `üìã Estado: ${statusText}\n`;
                message += `üí∞ $${apt.totalAmount.toLocaleString('es-CO')} COP\n`;
                message += `üìä ID: ${apt.id.substring(0, 8).toUpperCase()}\n\n`;
            }
        }
        
        // Show recent completed appointments
        if (completedAppointments.length > 0) {
            message += '‚úÖ **CITAS COMPLETADAS (√∫ltimas 3):**\n\n';
            
            const recentCompleted = completedAppointments.slice(0, 3);
            for (const apt of recentCompleted) {
                const appointmentDate = apt.appointmentDate.toLocaleDateString('es-CO', {
                    month: 'short',
                    day: 'numeric'
                });
                
                message += `‚Ä¢ ${appointmentDate} - ${apt.sampleType}\n`;
            }
            message += '\n';
        }
        
        // Show statistics
        const stats = await customerService.getCustomerStats(customerId);
        message += `üìä **RESUMEN:**\n`;
        message += `‚Ä¢ Total citas: ${stats.totalAppointments}\n`;
        message += `‚Ä¢ Completadas: ${stats.completedAppointments}\n`;
        message += `‚Ä¢ Pendientes: ${stats.pendingAppointments}\n`;
        
        if (stats.isFrequentCustomer) {
            message += `‚≠ê Cliente frecuente\n`;
        }
        
        await flowDynamic(message);
        
        // Show action options if there are pending appointments
        if (pendingAppointments.length > 0) {
            await utils.delay(1500);
            await flowDynamic([
                'üîß **¬øQu√© te gustar√≠a hacer?**',
                '',
                '1Ô∏è‚É£ Ver detalles de una cita',
                '2Ô∏è‚É£ Cancelar cita',
                '3Ô∏è‚É£ Reprogramar cita',
                '4Ô∏è‚É£ Agendar nueva cita',
                '5Ô∏è‚É£ No hacer nada por ahora',
                '',
                'üìù Responde con el n√∫mero de tu opci√≥n:'
            ].join('\n'));
            
            await state.update({ 
                step: 'appointment_actions',
                pendingAppointments: JSON.stringify(pendingAppointments)
            });
        }
        
    } catch (error) {
        console.error('‚ùå Error consultando citas:', error);
        await flowDynamic('‚ùå Hubo un problema consultando tus citas. Por favor intenta de nuevo.');
    }
})
.addAction(
    { capture: true },
    async (ctx, { flowDynamic, state, gotoFlow, fallBack }) => {
        try {
            const step = state.get('step');
            const userInput = ctx.body.trim();
            
            if (step === 'schedule_suggestion') {
                if (userInput.toLowerCase().includes('s√≠') || userInput.toLowerCase().includes('si')) {
                    return gotoFlow(scheduleFlow);
                } else {
                    await flowDynamic('üëç Perfecto. Si necesitas algo m√°s, simplemente escr√≠beme. ¬°Estoy aqu√≠ para ayudarte!');
                    await state.clear();
                }
                return;
            }
            
            if (step === 'appointment_actions') {
                const option = parseInt(userInput);
                const pendingAppointments = JSON.parse(state.get('pendingAppointments') || '[]');
                
                switch (option) {
                    case 1:
                        return await handleAppointmentDetails(pendingAppointments, { flowDynamic, state });
                    case 2:
                        return gotoFlow(cancelAppointmentFlow);
                    case 3:
                        return gotoFlow(rescheduleAppointmentFlow);
                    case 4:
                        return gotoFlow(scheduleFlow);
                    case 5:
                        await flowDynamic('üëç Perfecto. ¬°Que tengas un buen d√≠a!');
                        await state.clear();
                        return;
                    default:
                        await flowDynamic([
                            '‚ùå **Opci√≥n no v√°lida**',
                            '',
                            'Por favor responde con un n√∫mero del 1 al 5.',
                            '',
                            'üìù ¬øQu√© opci√≥n eliges?'
                        ].join('\n'));
                        return fallBack();
                }
            }
            
        } catch (error) {
            console.error('‚ùå Error procesando acci√≥n:', error);
            await flowDynamic('‚ùå Hubo un problema procesando tu solicitud. ¬øPodr√≠as intentar de nuevo?');
            return fallBack();
        }
    }
);

/**
 * Modify appointment flow - Entry point for cancellations and rescheduling
 */
export const modifyAppointmentFlow = addKeyword<BaileysProvider, PostgreSQLAdapter>([
    'cancelar',
    'reprogramar',
    'cambiar cita',
    'modificar cita'
])
.addAction(async (ctx, { flowDynamic, state, gotoFlow }) => {
    try {
        // Get customer and check for pending appointments
        let customerId = state.get('customerId');
        if (!customerId) {
            const customer = await customerService.findOrCreateFromWhatsApp(ctx.from, ctx.pushName);
            customerId = customer.id;
            await state.update({ customerId, customerName: customer.name });
        }
        
        const appointments = await appointmentRepository.getCustomerAppointments(customerId, {
            status: ['scheduled', 'confirmed'],
            limit: 5
        });
        
        if (appointments.length === 0) {
            await flowDynamic([
                'üìÖ **No tienes citas activas para modificar**',
                '',
                '¬øTe gustar√≠a agendar una nueva cita?',
                '',
                'Responde "s√≠" para agendar o "no" si necesitas algo m√°s.'
            ].join('\n'));
            
            await state.update({ step: 'schedule_suggestion' });
            return;
        }
        
        await flowDynamic([
            'üîß **¬øQu√© te gustar√≠a hacer?**',
            '',
            '1Ô∏è‚É£ Cancelar cita',
            '2Ô∏è‚É£ Reprogramar cita',
            '',
            'üìù Responde con el n√∫mero de tu opci√≥n:'
        ].join('\n'));
        
        await state.update({ 
            step: 'modify_action',
            appointments: JSON.stringify(appointments)
        });
        
    } catch (error) {
        console.error('‚ùå Error en modificaci√≥n de citas:', error);
        await flowDynamic('‚ùå Hubo un problema. Por favor intenta de nuevo.');
    }
})
.addAction(
    { capture: true },
    async (ctx, { flowDynamic, state, gotoFlow, fallBack }) => {
        const step = state.get('step');
        const userInput = ctx.body.trim();
        
        if (step === 'schedule_suggestion') {
            if (userInput.toLowerCase().includes('s√≠') || userInput.toLowerCase().includes('si')) {
                return gotoFlow(scheduleFlow);
            } else {
                await flowDynamic('üëç Perfecto. ¬°Que tengas un buen d√≠a!');
                await state.clear();
            }
            return;
        }
        
        if (step === 'modify_action') {
            const option = parseInt(userInput);
            
            switch (option) {
                case 1:
                    return gotoFlow(cancelAppointmentFlow);
                case 2:
                    return gotoFlow(rescheduleAppointmentFlow);
                default:
                    await flowDynamic([
                        '‚ùå **Opci√≥n no v√°lida**',
                        '',
                        'Por favor responde:',
                        '1 para cancelar',
                        '2 para reprogramar',
                        '',
                        'üìù ¬øQu√© eliges?'
                    ].join('\n'));
                    return fallBack();
            }
        }
    }
);

/**
 * Cancel appointment flow - Handles appointment cancellations
 */
export const cancelAppointmentFlow = addKeyword<BaileysProvider, PostgreSQLAdapter>(EVENTS.ACTION)
.addAction(async (ctx, { flowDynamic, state, gotoFlow }) => {
    try {
        const customerId = state.get('customerId');
        const appointments = await appointmentRepository.getCustomerAppointments(customerId, {
            status: ['scheduled', 'confirmed'],
            limit: 5
        });
        
        if (appointments.length === 0) {
            await flowDynamic('üìÖ No tienes citas activas para cancelar.');
            return;
        }
        
        if (appointments.length === 1) {
            // Only one appointment, show details and ask for confirmation
            const apt = appointments[0];
            const timeSlot = await appointmentRepository.findTimeSlotById(apt.timeSlotId);
            const appointmentDate = apt.appointmentDate.toLocaleDateString('es-CO', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            await flowDynamic([
                '‚ùå **CANCELAR CITA**',
                '',
                `üìÖ **Fecha:** ${appointmentDate}`,
                `üïê **Hora:** ${timeSlot?.startTime} - ${timeSlot?.endTime}`,
                `üî¨ **Tipo:** ${apt.sampleType}`,
                `üìã **ID:** ${apt.id.substring(0, 8).toUpperCase()}`,
                '',
                '‚ö†Ô∏è **¬øEst√°s seguro de que quieres cancelar esta cita?**',
                '',
                'Responde:',
                '‚Ä¢ "s√≠" para cancelar',
                '‚Ä¢ "no" para mantener la cita'
            ].join('\n'));
            
            await state.update({ 
                step: 'cancel_confirmation',
                appointmentToCancel: JSON.stringify(apt)
            });
            
        } else {
            // Multiple appointments, let user choose
            let message = '‚ùå **¬øQu√© cita quieres cancelar?**\n\n';
            
            appointments.forEach((apt, index) => {
                const appointmentDate = apt.appointmentDate.toLocaleDateString('es-CO', {
                    month: 'short',
                    day: 'numeric'
                });
                message += `${index + 1}Ô∏è‚É£ ${appointmentDate} - ${apt.sampleType}\n`;
            });
            
            message += '\nüìù Responde con el n√∫mero de la cita a cancelar:';
            
            await flowDynamic(message);
            await state.update({ 
                step: 'select_appointment',
                appointments: JSON.stringify(appointments)
            });
        }
        
    } catch (error) {
        console.error('‚ùå Error en cancelaci√≥n:', error);
        await flowDynamic('‚ùå Hubo un problema. Por favor intenta de nuevo.');
    }
})
.addAction(
    { capture: true },
    async (ctx, { flowDynamic, state, fallBack }) => {
        try {
            const step = state.get('step');
            const userInput = ctx.body.trim().toLowerCase();
            
            if (step === 'cancel_confirmation') {
                if (userInput.includes('s√≠') || userInput.includes('si')) {
                    const appointment = JSON.parse(state.get('appointmentToCancel'));
                    
                    // Check cancellation policy (2 hours before)
                    const now = new Date();
                    const appointmentDateTime = new Date(appointment.appointmentDate);
                    const timeSlot = await appointmentRepository.findTimeSlotById(appointment.timeSlotId);
                    
                    // Set appointment time
                    const [hours, minutes] = timeSlot.startTime.split(':');
                    appointmentDateTime.setHours(parseInt(hours), parseInt(minutes));
                    
                    const hoursUntilAppt = (appointmentDateTime.getTime() - now.getTime()) / (1000 * 60 * 60);
                    
                    if (hoursUntilAppt < BUSINESS_RULES.CANCELLATION_HOURS) {
                        await flowDynamic([
                            '‚è∞ **Cancelaci√≥n tard√≠a**',
                            '',
                            `Solo quedan ${Math.round(hoursUntilAppt * 60)} minutos para tu cita.`,
                            `Nuestra pol√≠tica requiere ${BUSINESS_RULES.CANCELLATION_HOURS} horas de anticipaci√≥n.`,
                            '',
                            '¬øA√∫n deseas cancelar? (Puede aplicar una penalizaci√≥n)',
                            '',
                            'Responde "confirmar cancelaci√≥n" para continuar.'
                        ].join('\n'));
                        
                        await state.update({ step: 'late_cancel_confirmation' });
                        return;
                    }
                    
                    // Cancel appointment
                    await appointmentRepository.updateStatus(appointment.id, AppointmentStatus.CANCELLED);
                    const customer = await customerService.findById(state.get('customerId'));
                    await notificationService.sendAppointmentCancellation(appointment, customer);
                    
                    await flowDynamic([
                        '‚úÖ **CITA CANCELADA EXITOSAMENTE**',
                        '',
                        'Tu cita ha sido cancelada y el horario queda disponible para otros clientes.',
                        '',
                        'üìÖ **¬øTe gustar√≠a reprogramar para otra fecha?**',
                        '',
                        'Responde "s√≠" para agendar nueva cita.'
                    ].join('\n'));
                    
                    await state.update({ step: 'reschedule_suggestion' });
                    
                } else {
                    await flowDynamic('üëç Perfecto. Tu cita se mantiene programada. ¬°Nos vemos pronto!');
                    await state.clear();
                }
                
            } else if (step === 'late_cancel_confirmation') {
                if (userInput.includes('confirmar cancelaci√≥n')) {
                    const appointment = JSON.parse(state.get('appointmentToCancel'));
                    
                    await appointmentRepository.updateStatus(appointment.id, AppointmentStatus.CANCELLED);
                    const customer = await customerService.findById(state.get('customerId'));
                    await notificationService.sendAppointmentCancellation(
                        appointment, 
                        customer, 
                        'Cancelaci√≥n tard√≠a'
                    );
                    
                    await flowDynamic([
                        '‚úÖ **CITA CANCELADA**',
                        '',
                        '‚ö†Ô∏è **Nota:** Debido a la cancelaci√≥n tard√≠a, podr√≠as tener restricciones para futuras citas.',
                        '',
                        'Gracias por informarnos.'
                    ].join('\n'));
                    
                    await state.clear();
                } else {
                    await flowDynamic('üëç Tu cita se mantiene programada. ¬°Te esperamos!');
                    await state.clear();
                }
                
            } else if (step === 'reschedule_suggestion') {
                if (userInput.includes('s√≠') || userInput.includes('si')) {
                    await state.clear();
                    await flowDynamic('üìù Te ayudo a agendar una nueva cita...');
                    // Note: Would redirect to schedule flow in complete implementation
                    return fallBack('Por favor escribe "agendar cita" para empezar el proceso.');
                } else {
                    await flowDynamic('üëç Perfecto. ¬°Que tengas un buen d√≠a!');
                    await state.clear();
                }
            }
            
        } catch (error) {
            console.error('‚ùå Error en confirmaci√≥n de cancelaci√≥n:', error);
            await flowDynamic('‚ùå Hubo un problema procesando la cancelaci√≥n. Por favor intenta de nuevo.');
            return fallBack();
        }
    }
);

/**
 * Reschedule appointment flow - Handles appointment rescheduling
 */
export const rescheduleAppointmentFlow = addKeyword<BaileysProvider, PostgreSQLAdapter>(EVENTS.ACTION)
.addAction(async (ctx, { flowDynamic, state }) => {
    await flowDynamic([
        'üîÑ **REPROGRAMAR CITA**',
        '',
        'Esta funci√≥n te permitir√° cambiar la fecha y hora de tu cita actual.',
        '',
        '‚è≥ Preparando opciones de reprogramaci√≥n...'
    ].join('\n'));
    
    // Implementation would be similar to scheduleFlow but for existing appointments
    // For now, direct to customer service
    await utils.delay(2000);
    
    await flowDynamic([
        'üöß **Funci√≥n en desarrollo**',
        '',
        'Para reprogramar tu cita, por favor contacta directamente:',
        '',
        'üìû **Opciones:**',
        '‚Ä¢ Responde con "cancelar cita" y luego "agendar nueva"',
        '‚Ä¢ Contacta por tel√©fono para cambios urgentes',
        '',
        '¬°Disculpa las molestias!'
    ].join('\n'));
    
    await state.clear();
});

// Helper functions

async function handleAppointmentDetails(appointments: any[], { flowDynamic, state }: any) {
    if (appointments.length === 1) {
        const apt = appointments[0];
        const timeSlot = await appointmentRepository.findTimeSlotById(apt.timeSlotId);
        const appointmentDate = apt.appointmentDate.toLocaleDateString('es-CO', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        
        const details = [
            'üìã **DETALLES DE TU CITA**',
            '',
            `üìÖ **Fecha:** ${appointmentDate}`,
            `üïê **Hora:** ${timeSlot?.startTime} - ${timeSlot?.endTime}`,
            `üî¨ **Tipo de muestra:** ${apt.sampleType}`,
            `üí∞ **Valor:** $${apt.totalAmount.toLocaleString('es-CO')} COP`,
            `üìã **Estado:** ${apt.status === 'confirmed' ? 'Confirmada ‚úÖ' : 'Programada ‚è≥'}`,
            `üìä **ID de cita:** ${apt.id.substring(0, 8).toUpperCase()}`,
            '',
            apt.specialInstructions ? `üìù **Instrucciones:** ${apt.specialInstructions}` : '',
            '',
            '‚è∞ **Recuerda:**',
            '‚Ä¢ Estar en casa en el horario acordado',
            '‚Ä¢ Tener lista tu orden m√©dica',
            '‚Ä¢ Seguir las instrucciones de preparaci√≥n'
        ].filter(line => line !== '').join('\n');
        
        await flowDynamic(details);
        
    } else {
        let message = 'üìã **Elige la cita para ver detalles:**\n\n';
        
        appointments.forEach((apt, index) => {
            const appointmentDate = apt.appointmentDate.toLocaleDateString('es-CO', {
                month: 'short',
                day: 'numeric'
            });
            message += `${index + 1}Ô∏è‚É£ ${appointmentDate} - ${apt.sampleType}\n`;
        });
        
        message += '\nüìù Responde con el n√∫mero:';
        
        await flowDynamic(message);
        await state.update({ step: 'appointment_detail_selection' });
    }
}

// Import scheduleFlow to avoid circular dependency issues
let scheduleFlow: any;
export function setScheduleFlow(flow: any) {
    scheduleFlow = flow;
}
